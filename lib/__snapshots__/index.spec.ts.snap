// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenerateTypings given an empty openapi schema should match generated snapshot 1`] = `""`;

exports[`GenerateTypings given the Petstore Expanded schema FetchClientFormatter should match generated snapshot 1`] = `
"export type Pet = NewPet & {
  id: number;
  [k: string]: any;
};

export interface NewPet {
  name: string;
  tag?: string;
  [k: string]: any;
}

export interface Error {
  code: number;
  message: string;
  [k: string]: any;
}

const fetch = require('node-fetch')
const pick = (obj:any, keys:string[]) => keys.reduce((picked, key) => obj[key] !== undefined ? Object.assign(picked, {[key]: obj[key]}) : picked, {})
const substitutePath = (pathName:string, body:any) => pathName.split('/').map(dir => dir.startsWith('{') ? body[dir.slice(1,-1)] : dir).join('/')
const encodeQuery = (obj:any, keys:string[]) => require('querystring').encode(pick(obj, keys))
const API_URL = \\"http://petstore.swagger.io/api\\"
export interface FindPetsRequest {
  tags: string[]
  limit: number
}
export type FindPetsResult = (Pet)[];

export type FindPetsFallback = Error;

export type FindPets = (payload: FindPetsRequest) => Promise<FindPetsResult>;
const FindPets =
      async (body:FindPetsRequest, options:any):Promise<FindPetsResult> => {
        return fetch([API_URL, encodeQuery(body, [\\"tags\\",\\"limit\\"])].filter(x=>x).join('?'), {
          ...options,
          method: \\"get\\",
          
        }).then((res:any) => res.json())
      }
export type AddPetRequest = NewPet
export type AddPetResult = Pet;

export type AddPetFallback = Error;

export type AddPet = (payload: AddPetRequest) => Promise<AddPetResult>;
const AddPet =
      async (body:AddPetRequest, options:any):Promise<AddPetResult> => {
        return fetch(API_URL, {
          ...options,
          method: \\"post\\",
          body: JSON.stringify(body),
        }).then((res:any) => res.json())
      }
export interface FindPetByIdRequest {
  id: number
}
export type FindPetByIdResult = Pet;

export type FindPetByIdFallback = Error;

export type FindPetById = (payload: FindPetByIdRequest) => Promise<FindPetByIdResult>;
const FindPetById =
      async (body:FindPetByIdRequest, options:any):Promise<FindPetByIdResult> => {
        return fetch(API_URL + substitutePath(\\"/pets/{id}\\", body), {
          ...options,
          method: \\"get\\",
          
        }).then((res:any) => res.json())
      }
export interface DeletePetRequest {
  id: number
}
export type DeletePetResult = any
export type DeletePetFallback = Error;

export type DeletePet = (payload: DeletePetRequest) => Promise<DeletePetResult>;
const DeletePet =
      async (body:DeletePetRequest, options:any):Promise<DeletePetResult> => {
        return fetch(API_URL + substitutePath(\\"/pets/{id}\\", body), {
          ...options,
          method: \\"delete\\",
          
        }).then((res:any) => res.json())
      }"
`;

exports[`GenerateTypings given the Petstore Expanded schema should match generated snapshot 1`] = `
"export type Pet = NewPet & {
  id: number;
  [k: string]: any;
};

export interface NewPet {
  name: string;
  tag?: string;
  [k: string]: any;
}

export interface Error {
  code: number;
  message: string;
  [k: string]: any;
}

export interface FindPetsRequest {
  tags: string[]
  limit: number
}
export type FindPetsResult = (Pet)[];

export type FindPetsFallback = Error;

export type AddPetRequest = NewPet
export type AddPetResult = Pet;

export type AddPetFallback = Error;

export interface FindPetByIdRequest {
  id: number
}
export type FindPetByIdResult = Pet;

export type FindPetByIdFallback = Error;

export interface DeletePetRequest {
  id: number
}
export type DeletePetResult = any
export type DeletePetFallback = Error;
"
`;

exports[`GenerateTypings given the Petstore schema should match generated snapshot 1`] = `
"export interface Pet {
  id: number;
  name: string;
  tag?: string;
  [k: string]: any;
}

export type Pets = (Pet)[];

export interface Error {
  code: number;
  message: string;
  [k: string]: any;
}

export interface ListPetsRequest {
  limit: number
}
export type ListPetsResult = Pets;

export type ListPetsFallback = Error;

export interface CreatePetsRequest {
}
export type CreatePetsResult = any
export type CreatePetsFallback = Error;

export interface ShowPetByIdRequest {
  petId: string
}
export type ShowPetByIdResult = Pets;

export type ShowPetById204 = any
export type ShowPetByIdFallback = Error;
"
`;
